generator client {
  provider = "prisma-client-js"
  output        = "../src/generated/postgres"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  username         String       @unique
  password         String
  profilePicture   String?
  userDomains      UserDomain[]
  currentDomainId  String?      
  currentDomain    Domain?      @relation("CurrentDomainForUser", fields: [currentDomainId], references: [id])
}

model Domain {
  id           String       @id @default(cuid())
  name         String       @unique
  userDomains  UserDomain[]

  usersAsCurrentDomain User[] @relation("CurrentDomainForUser")  // no `?`
}

model UserDomain {
  id       String  @id @default(cuid())
  userId   String
  domainId String
  userRole String

  user   User   @relation(fields: [userId], references: [id])
  domain Domain @relation(fields: [domainId], references: [id])

  @@unique([userId, domainId])
}

model UserRole {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  permissions RolePermission[] @relation("RoleToPermission")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
}

model Role {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String?
  rolePermissions RolePermission[]
}

model RolePermission {
  id           String      @id @default(cuid())
  roleId       String
  permissionId String
  role         UserRole    @relation("RoleToPermission", fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])
}

enum PermissionScope {
  ALL_DOMAINS
  ASSIGNED_DOMAINS
}