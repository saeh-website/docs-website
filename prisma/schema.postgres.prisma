generator client {
  provider = "prisma-client-js"
  output        = "../src/generated/postgres"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  username         String       @unique
  password         String
  profilePicture   String?
  userDomains      UserDomain[]
  currentDomainId  String?      
  currentDomain    Domain?      @relation("CurrentDomainForUser", fields: [currentDomainId], references: [id])
}

model Domain {
  id           String        @id @default(cuid())
  name         String        @unique
  userDomains  UserDomain[]

  usersAsCurrentDomain User[]? @relation("CurrentDomainForUser")  // <- this must match relation name
}

model UserDomain {
  id       String  @id @default(cuid())
  userId   String
  domainId String
  userRole String

  user   User   @relation(fields: [userId], references: [id])
  domain Domain @relation(fields: [domainId], references: [id])

  @@unique([userId, domainId])
}


model UserRole {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  permissions  RolePermission[]
}

model Permission {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
}

model RolePermission {
  id           String         @id @default(cuid())
  role         UserRole       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission     @relation(fields: [permissionId], references: [id])
  permissionId String
  appliesToRoles String[]     // optional: restrict effect to specific roles
  scope         PermissionScope @default(ASSIGNED_DOMAINS)
}

enum PermissionScope {
  ALL_DOMAINS
  ASSIGNED_DOMAINS
}