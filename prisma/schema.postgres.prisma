generator client {
  provider = "prisma-client-js"
  output        = "../src/generated/postgres"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  username       String    @unique
  password       String
  profilePicture String?
  currentDomainId String?  // current domain context for the user
  currentDomain   Domain?  @relation(fields: [currentDomainId], references: [id])
  userDomains     UserDomain[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Domain {
  id        String       @id @default(cuid())
  name      String       @unique
  users     UserDomain[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model UserDomain {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  domain   Domain   @relation(fields: [domainId], references: [id])
  domainId String
  userRole UserRole @relation(fields: [userRoleId], references: [id])
  userRoleId String
}

model UserRole {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  permissions  RolePermission[]
}

model Permission {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
}

model RolePermission {
  id           String         @id @default(cuid())
  role         UserRole       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission     @relation(fields: [permissionId], references: [id])
  permissionId String
  appliesToRoles String[]     // optional: restrict effect to specific roles
  scope         PermissionScope @default(ASSIGNED_DOMAINS)
}

enum PermissionScope {
  ALL_DOMAINS
  ASSIGNED_DOMAINS
}